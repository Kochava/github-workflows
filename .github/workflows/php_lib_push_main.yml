name: Create Github Release

on:
  workflow_call:
    inputs:
      PHP_LINT:
        description: 'Toggle for the PHP lint step'
        required: false
        default: true
        type: boolean
      # Some libraries don't have unit tests and thus don't vendor phpunit
      PHP_UNIT:
        description: 'Toggle for the PHP unit test step'
        required: false
        default: true
        type: boolean
      COMPOSER_WORKING_DIRECTORY:
        description: 'Working directory for installing composer and running linting and unit tests'
        required: false
        default: "."
        type: string
      COMPOSER_OPTIONS:
        description: 'composer options to use'
        required: false
        default: "--ignore-platform-reqs"
        type: string
    secrets:
      GH_CI_PAT:
        description: 'Token password for GitHub auth'
        required: true
      CODECOV_TOKEN:
        description: 'Token for Codecov'
        required: true

jobs:
  test:
    #
    # ensure php standards and tests pass
    #
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # List of php versions to test on.
        php-version: ['7.0']
    steps:
      # Checkout php code to test.
      - name: Checkout repo
        uses: actions/checkout@v3
        # Setup PHP for each version in the matrix.
      - name: Setup PHP
        uses: shivammathur/setup-php@v2 # https://github.com/marketplace/actions/setup-php-action
        with:
          php-version: ${{ matrix.php-version }}
      # Vendor PHP code.
      - name: Composer
        env:
          COMPOSER_AUTH: '${{ secrets.COMPOSER_AUTH }}'
        uses: "ramsey/composer-install@v2"
        with:
          working-directory: "${{ inputs.COMPOSER_WORKING_DIRECTORY }}"
          composer-options: "${{ inputs.COMPOSER_OPTIONS }}"
      # Run PHP linter.
      - name: php lint
        if: ${{ inputs.PHP_LINT }}
        run: ${{ inputs.COMPOSER_WORKING_DIRECTORY }}/vendor/bin/phpcs -s --extensions=php
      # Run PHP unit tests.
      - name: phpunit
        if: ${{ inputs.PHP_UNIT }}
        run: ${{ inputs.COMPOSER_WORKING_DIRECTORY }}/vendor/bin/phpunit --log-junit junit.xml --coverage-clover coverage.xml
      - name: Upload test coverage results to Codecov
        if: ${{ inputs.PHP_UNIT }}
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: Upload test results to Codecov
        if: ${{ inputs.PHP_UNIT }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
  release:
    #
    # Create a GitHub Release based on conventional commits.
    #
    name: 'Release to GitHub'
    runs-on: ubuntu-latest
    needs: test
    steps:
      # Checkout code to release.
      - name: Checkout repo
        uses: actions/checkout@v3
      # Setup Node needed to create release.
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 18
      # Add plugin to make the changelog for the release.
      - name: Add plugin for conventional commits
        run: npm install conventional-changelog-conventionalcommits@6
        working-directory: ./.github/workflows
      # Create the release.
      - name: Release to GitHub
        working-directory: ./.github/workflows
        env:
          GITHUB_TOKEN: ${{ secrets.GH_CI_PAT }}
          GIT_AUTHOR_NAME: release-bot
          GIT_AUTHOR_EMAIL: release@test.com
          GIT_COMMITTER_NAME: asyncapi-bot
          GIT_COMMITTER_EMAIL: info@asyncapi.io
        run: npx semantic-release@22.0.12
