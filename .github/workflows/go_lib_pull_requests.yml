name: Pull Request
on:
  workflow_call:
    inputs:
      GH_CI_USER:
        description: "User for GitHub auth"
        required: true
        type: string
      GOPRIVATE:
        description: "GOPRIVATE env for go commands"
        required: false
        type: string
      GOWORKSPACE:
        description: "Go workspace mode"
        required: false
        type: string
    secrets:
      GH_CI_PAT:
        description: "Token password for GitHub auth"
        required: true
      CODECOV_TOKEN:
        description: 'Token for Codecov'
        required: true
env:
  GOPRIVATE: ${{ inputs.GOPRIVATE }}
jobs:
  commitlint:
    #
    # ensures commit messages follow conventional commits
    #
    runs-on: ubuntu-latest
    steps:
      # checkout the commits to lint.
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # setup node, needed to lint commits.
      - uses: actions/setup-node@v1
        with:
          node-version: 18
      # Install needed libraries to lint commits.
      - run: npm install --save-dev @commitlint/{config-conventional@v18.6.0,cli}
      # Lint the commits.
      - run: npx commitlint --from=${{ github.event.pull_request.base.sha }}
  lint:
    #
    # runs golangci-lint
    #
    runs-on: ubuntu-latest
    if: ${{ inputs.GOWORKSPACE != 'true' }}
    steps:
      # Checkout code to build.
      - name: Checkout repo
        uses: actions/checkout@v4
      # Setup Go.
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "^1"
      # Use auth to get access to private Git repos for Go code dependencies.
      - name: Configure git for private modules
        env:
          TOKEN: ${{ secrets.GH_CI_PAT }}
          GITHUB_USERNAME: kochava-ci
        run:
          git config --global url."https://${GITHUB_USERNAME}:${TOKEN}@github.com".insteadOf
          "https://github.com"
      - name: Run golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: --timeout=5m --enable=bodyclose
  test:
    #
    # ensure go standards and tests pass
    #
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # List of go versions to test on.
        go: ["^1"]
    steps:
      # Checkout go code to test.
      - name: Checkout repo
        uses: actions/checkout@v4
      # Setup Go for each version in the matrix.
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}
      # Use auth to get access to private Git repos for Go code dependencies.
      - name: Configure git for private modules
        env:
          TOKEN: ${{ secrets.GH_CI_PAT }}
          GITHUB_USERNAME: ${{ inputs.GH_CI_USER }}
        run:
          git config --global url."https://${GITHUB_USERNAME}:${TOKEN}@github.com".insteadOf
          "https://github.com"
      # Go vet every Go module.
      - name: go vet
        run:
          find . -name vendor -prune -o -name go.mod -print | xargs -n1 dirname
          | xargs -n1 -I{} bash -c "pushd {}; go vet ./..."
      # Install go-junit-report to format test results.
      - name: Install go-junit-report
        run: go install github.com/jstemmer/go-junit-report@v2.1.0
      # Run unit test for evet Go module.
      - name: go test
        run:
          find . -name vendor -prune -o -name go.mod -print | xargs -n1 dirname
          | xargs -n1 -I{} bash -c "pushd {}; go test -coverprofile=coverage.txt --race -v ./..."
          | go-junit-report -set-exit-code > junit_report.xml || true
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test Report
          path: junit_report.xml
          reporter: java-junit
      - uses: codecov/test-results-action@v1
        with:
          fail_ci_if_error: true # optional (default = false)
          files: ./junit_report.xml
          name: junit-report
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: Upload test coverage results to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}