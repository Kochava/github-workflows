name: Pull Request

on:
  workflow_call:
    inputs:
      DATABASE_ADAPTER:
        description: 'Database adapter for Postgres test step service'
        required: true
        type: string
        default: postgresql
      DATABASE_NAME:
        description: 'Database name for Postgres test step service'
        required: true
        type: string
        default: thalamus_test
      DATABASE_USERNAME:
        description: 'User for Postgres test step service'
        required: true
        type: string
        default: postgres
      DATABASE_HOST:
        description: 'Database host for Postgres test step service'
        required: true
        type: string
        default: localhost
      SQL_PATH:
        description: 'SQL path to import Postgres test step service'
        required: true
        type: string
        default: db/structure.sql
    secrets:
      DATABASE_PASSWORD:
        description: 'Database password for Postgres test step service'
        required: true

jobs:
  commitlint:
    #
    # ensures commit messages follow conventional commits
    #
    runs-on: ubuntu-latest
    steps:
      # checkout the commits to lint.
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      # setup node, needed to lint commits.
      - uses: actions/setup-node@v1
        with:
          node-version: 18
      # Install needed libraries to lint commits.
      - run: npm install --save-dev @commitlint/{config-conventional,cli}
      # Lint the commits.
      - run: npx commitlint --from=${{ github.event.pull_request.base.sha }}

  # codelint:
  #   #
  #   # ensure ruby/rails code standards
  #   #
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v3
  #     - uses: ruby/setup-ruby@477b21f02be01bcb8030d50f37cfec92bfa615b6
  #       with:
  #         bundler-cache: true
  #     - run: bundle install
  #     - name: Rubocop
  #       run: bundle exec rubocop

  test:
      #
      # ensure ruby standards and tests pass
      #
      runs-on: ubuntu-latest

      services:
        database:
          image: postgres:12.3
          env:
            POSTGRES_PASSWORD: '${{ secrets.DATABASE_PASSWORD }}'
          ports:
            - 5432:5432

        redis:
          image: redis:5.0.7
          options: >-
            --health-cmd "redis-cli ping"
            --health-interval 10s
            --health-timeout 5s
            --health-retries 5
          ports:
            - 6379:6379

        elasticsearch:
          image: docker.elastic.co/elasticsearch/elasticsearch:6.8.6
          ports:
            - 9200:9200

      steps:
        # Checkout ruby code to test.
        - name: Checkout repo
          uses: actions/checkout@v3
        # Setup Ruby, by default uses .ruby-version file.
        - name: Setup up Ruby
          uses: ruby/setup-ruby@477b21f02be01bcb8030d50f37cfec92bfa615b6
          with:
            bundler-cache: true
        - name: Install dependencies
          run: bundle install
        - name: Setup database
          run: psql -h ${{ inputs.DATABASE_HOST }} -U ${{ inputs.DATABASE_USERNAME }} -c 'CREATE DATABASE "thalamus_test";'
          env:
            PGPASSWORD: '${{ secrets.DATABASE_PASSWORD }}'
        - name: Prepare test database
          run: psql -h ${{ inputs.DATABASE_HOST }} -U ${{ inputs.DATABASE_USERNAME }} -d ${{ inputs.DATABASE_NAME }} < ${{ inputs.SQL_PATH }}
          env:
            PGPASSWORD: '${{ secrets.DATABASE_PASSWORD }}'
        - name: Run tests
          run: bundle exec rspec spec

  docker-build:
    #
    # ensures the docker image will build without pushing to the registry
    # uses the git sha for the most recent commit for the version
    #
    runs-on: ubuntu-latest
    steps:
      # Checkout code to build.
      - name: Checkout repo
        uses: actions/checkout@v3
      # Setup docker build arguments.
      - name: Docker release meta
        id: release
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ github.repository }}
          tags: |
            type=sha
      # Setup Docker builder to do build.
      - name: Setup Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      # Build the app.
      - name: Build
        uses: docker/build-push-action@v3
        with:
          push: false
          context: .
          file: Dockerfile
          platforms: linux/amd64
          tags: ${{ steps.release.outputs.tags }}