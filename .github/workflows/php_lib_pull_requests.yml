name: Pull Request

on:
  workflow_call:
    inputs:
      PHP_LINT:
        description: 'Toggle for the PHP lint step'
        required: false
        default: true
        type: boolean
      # Some libraries don't have unit tests and thus don't vendor phpunit
      PHP_UNIT:
        description: 'Toggle for the PHP unit test step'
        required: false
        default: true
        type: boolean
      SETUP_PHP_EXTENSIONS:
        description: 'The extensions to enable while setting up PHP (csv)'
        required: false
        default: ""
        type: string
      SETUP_PHP_TOOLS:
        description: 'The tools to enable while setting up PHP (csv)'
        required: false
        default: "composer:v1"
        type: string
      SETUP_PHP_COVERAGE:
        description: 'The coverage tool to enable while setting up PHP (csv)'
        required: false
        default: "xdebug"
        type: string
      COMPOSER_WORKING_DIRECTORY:
        description: 'Working directory for installing composer and running linting and unit tests'
        required: false
        default: "."
        type: string
      COMPOSER_OPTIONS:
        description: 'composer options to use'
        required: false
        default: "--ignore-platform-reqs"
        type: string
    secrets:
      COMPOSER_AUTH:
        description: 'Auth JSON for Composer'
        required: true
      CODECOV_TOKEN:
        description: 'Token for Codecov'
        required: true

jobs:
  commitlint:
    #
    # ensures commit messages follow conventional commits
    #
    runs-on: ubuntu-latest
    steps:
      # checkout the commits to lint.
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      # setup node, needed to lint commits.
      - uses: actions/setup-node@v1
        with:
          node-version: 18
      # Install needed libraries to lint commits.
      - run: npm install --save-dev @commitlint/{config-conventional@v18.6.0,cli}
      # Lint the commits.
      - run: npx commitlint --from=${{ github.event.pull_request.base.sha }}

  test:
    #
    # ensure php standards and tests pass
    #
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # List of php versions to test on.
        php-version: ['7.0']
    steps:
      # Checkout php code to test.
      - name: Checkout repo
        uses: actions/checkout@v3
        # Setup PHP for each version in the matrix.
      - name: Setup PHP
        uses: shivammathur/setup-php@v2 # https://github.com/marketplace/actions/setup-php-action
        with:
          php-version: ${{ matrix.php-version }}
          extensions: ${{ inputs.SETUP_PHP_EXTENSIONS }}
          tools: ${{ inputs.SETUP_PHP_TOOLS }}
          coverage: ${{ inputs.SETUP_PHP_COVERAGE }}
      # Vendor PHP code.
      - name: Composer
        env:
          COMPOSER_AUTH: '${{ secrets.COMPOSER_AUTH }}'
        run: composer install -d ${{ inputs.COMPOSER_WORKING_DIRECTORY }} ${{ inputs.COMPOSER_OPTIONS }}
      # Run PHP linter.
      - name: php lint
        if: ${{ inputs.PHP_LINT }}
        run: ${{ inputs.COMPOSER_WORKING_DIRECTORY }}/vendor/bin/phpcs -s --extensions=php
      # Run PHP unit tests.
      - name: phpunit
        if: ${{ inputs.PHP_UNIT }}
        run: ${{ inputs.COMPOSER_WORKING_DIRECTORY }}/vendor/bin/phpunit --log-junit junit.xml --coverage-clover coverage.xml
      - name: Upload test coverage results to Codecov
        if: ${{ inputs.PHP_UNIT }}
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
      - name: Upload test results to Codecov
        if: ${{ inputs.PHP_UNIT }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
