name: Create Github Release

on:
  workflow_call:
    inputs:
      GH_CI_USER:
        description: "User for GitHub auth"
        required: true
        type: string
      GOPRIVATE:
        description: "GOPRIVATE env for go commands"
        required: false
        type: string
      GO_TEST_UNIT_TAGS:
        description: "The tags flag for the unit test go test call. Include -tags flag. Example -tags=unit"
        type: string
        required: false
        default: ""
      GO_TEST_INTEGRATION_ENABLED:
        type: boolean
        default: false
      GO_TEST_INTEGRATION_TAGS:
        description: "The tags flag for the integration test go test call. Include -tags flag. Example -tags=integration"
        type: string
        default: "-tags=integration"
    secrets:
      GH_CI_PAT:
        description: 'Token password for GitHub auth'
        required: true
      CODECOV_TOKEN:
        description: 'Token for Codecov'
        required: true
      ARTIFACT_REGISTRY:
        description: 'Artifact Registry address to which to publish (leave blank to not publish)'
        required: false
      ARTIFACT_REGISTRY_JSON_KEY:
        description: 'Key for publishing to Artifact Registry'
        required: false
env:
  GOPRIVATE: ${{ inputs.GOPRIVATE }}
jobs:
  test:
    #
    # ensure go standards and tests pass
    #
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # List of go versions to test on.
        go: ['^1']
    steps:
      # Checkout go code to test.
      - name: Checkout repo
        uses: actions/checkout@v3
      # Setup Go for each version in the matrix.
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go }}
      - name: Login to Artifact Registry
        env:
          ARTIFACT_REGISTRY_JSON_KEY: ${{ secrets.ARTIFACT_REGISTRY_JSON_KEY }}
        if: ${{ env.ARTIFACT_REGISTRY_JSON_KEY }}
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.ARTIFACT_REGISTRY }}
          username: _json_key
          password: ${{ secrets.ARTIFACT_REGISTRY_JSON_KEY }}
      # Use auth to get access to private Git repos for Go code dependencies.
      - name: Configure git for private modules
        env:
          TOKEN: ${{ secrets.GH_CI_PAT }}
          GITHUB_USERNAME: ${{ inputs.GH_CI_USER }}
        run: git config --global url."https://${GITHUB_USERNAME}:${TOKEN}@github.com".insteadOf
          "https://github.com"
      # Vendor Go code needed to build app.
      - name: go mod vendor
        run: go mod vendor
      # Go vet every Go module.
      - name: go vet
        run:
          find . -name vendor -prune -o -name go.mod -print | xargs -n1 dirname | xargs -n1 -I{} bash -c "pushd {}; go vet ./..."
      - name: build coverage output directories
        run: |
          mkdir -p coverage/unit
          mkdir -p coverage/int
      - name: go test
        run:
          find . -name vendor -prune -o -name go.mod -print | xargs -n1 dirname | xargs -n1 -I{} bash -c "pushd {}; go test -cover --race -v ${{ inputs.GO_TEST_UNIT_TAGS }} ./... -args -test.gocoverdir=\"${{ github.workspace }}/coverage/unit\""
          | go-junit-report -set-exit-code > junit_report.xml || true
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure()
        with:
          name: Test Report
          path: junit_report.xml
          reporter: java-junit
      - uses: codecov/test-results-action@v1
        with:
          fail_ci_if_error: true # optional (default = false)
          files: ./junit_report.xml
          name: junit-report
          token: ${{ secrets.CODECOV_TOKEN }}
        # relies on the tests themselves compiling the binary with `-cover` and setting GOCOVERDIR to /coverage/int
        # to seperate out any integration tests
      - name: integration tests
        if: ${{ inputs.GO_TEST_INTEGRATION_ENABLED }}
        run: go test -v ${{ inputs.GO_TEST_INTEGRATION_TAGS }} ./...
      - name: show coverage output directories
        run: |
          ls ./coverage/unit
          ls ./coverage/int
      - name: build coverage.txt
        run: go tool covdata textfmt -i=./coverage/int,./coverage/unit -o coverage.txt
      - name: Upload test coverage results to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
  release:
    #
    # Create a GitHub Release based on conventional commits.
    #
    name: 'Release to GitHub'
    # needs: test
    runs-on: ubuntu-latest
    needs: test
    steps:
      # Checkout code to release.
      - name: Checkout repo
        uses: actions/checkout@v4
      # Setup Node needed to create release.
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 18
      # Add plugin to make the changelog for the release.
      - name: Add plugin for conventional commits
        run: npm install conventional-changelog-conventionalcommits@6
        working-directory: ./.github/workflows
      # Create the release.
      - name: Release to GitHub
        working-directory: ./.github/workflows
        env:
          GITHUB_TOKEN: ${{ secrets.GH_CI_PAT }}
          GIT_AUTHOR_NAME: release-bot
          GIT_AUTHOR_EMAIL: release@test.com
          GIT_COMMITTER_NAME: asyncapi-bot
          GIT_COMMITTER_EMAIL: info@asyncapi.io
        run: npx semantic-release@22.0.12
