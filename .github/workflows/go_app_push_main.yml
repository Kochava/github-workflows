name: Create Github Release

on:
  workflow_call:
    inputs:
      GH_CI_USER:
        description: "User for GitHub auth"
        required: true
        type: string
      GOPRIVATE:
        description: "GOPRIVATE env for go commands"
        required: false
        type: string
    secrets:
      GH_CI_PAT:
        description: 'Token password for GitHub auth'
        required: true
      CODECOV_TOKEN:
        description: 'Token for Codecov'
        required: false
env:
  GOPRIVATE: ${{ inputs.GOPRIVATE }}
jobs:
  test:
    #
    # ensure go standards and tests pass
    #
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # List of go versions to test on.
        go: ['^1']
    steps:
      # Checkout go code to test.
      - name: Checkout repo
        uses: actions/checkout@v3
      # Setup Go for each version in the matrix.
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go }}
      # Use auth to get access to private Git repos for Go code dependencies.
      - name: Configure git for private modules
        env:
          TOKEN: ${{ secrets.GH_CI_PAT }}
          GITHUB_USERNAME: ${{ inputs.GH_CI_USER }}
        run: git config --global url."https://${GITHUB_USERNAME}:${TOKEN}@github.com".insteadOf
          "https://github.com"
      # Go vet every Go module.
      - name: go vet
        run: find . -name vendor -prune -o -name go.mod -print | xargs -n1 dirname
          | xargs -n1 -I{} bash -c "pushd {}; go vet ./..."
      # Run unit test for evet Go module.
      - name: go test
        run: find . -name vendor -prune -o -name go.mod -print | xargs -n1 dirname
          | xargs -n1 -I{} bash -c "pushd {}; go test -coverprofile=coverage.txt --race -v ./..."
      - name: Upload test coverage results to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
  release:
    #
    # Create a GitHub Release based on conventional commits.
    #
    name: 'Release to GitHub'
    # needs: test
    runs-on: ubuntu-latest
    steps:
      # Checkout code to release.
      - name: Checkout repo
        uses: actions/checkout@v3
      # Setup Node needed to create release.
      - name: Setup Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 18
      # Add plugin to make the changelog for the release.
      - name: Add plugin for conventional commits
        run: npm install conventional-changelog-conventionalcommits@6
        working-directory: ./.github/workflows
      # Create the release.
      - name: Release to GitHub
        working-directory: ./.github/workflows
        env:
          GITHUB_TOKEN: ${{ secrets.GH_CI_PAT }}
          GIT_AUTHOR_NAME: release-bot
          GIT_AUTHOR_EMAIL: release@test.com
          GIT_COMMITTER_NAME: asyncapi-bot
          GIT_COMMITTER_EMAIL: info@asyncapi.io
        run: npx semantic-release@22.0.12
